shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
View(result)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
View(result)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?is.n
?is.na
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
install.packages('gbm')
install.packages('glmnet')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
result = read.csv('data/result.csv')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
View(result)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
?ggplot
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?data_frame
shiny::runApp()
shiny::runApp()
shiny::runApp()
?data.frame
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?ggplot
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
summary(result)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
require(ISLR)
require(boot)
?cv.glm
plot(mpg~horsepower, data=Auto)
glm.fit=glm(mpg~horsepower, data=Auto)
cv.glm(Auto, glm.fit)$delta
loocv=function(fit){
h = lm.influence(fit)$h
mean((residuals(fit)/(1-h))^2)
}
loocv(glm.fit)
cv.error=rep(0,5)
degree=1:5
for(d in degree){
glm.fit=glm(mpg~poly(horsepower,d), data=Auto)
cv.error[d] = loocv(glm.fit)
}
plot(degree, cv.error, type='b')
cv.error10 = rep(0,5)
for (d in degree){
glm.fit = glm(mpg~ploy(horsepower, d), data=Auto)
cv.error10[d] = glm(Auto, glm.fit, K=10)$delta[1]
}
lines(degree, cv.error10, type='b', col='red')
cv.error10 = rep(0,5)
for (d in degree){
glm.fit = glm(mpg~poly(horsepower, d), data=Auto)
cv.error10[d] = glm(Auto, glm.fit, K=10)$delta[1]
}
lines(degree, cv.error10, type='b', col='red')
cv.error10 = rep(0,5)
for (d in degree){
glm.fit = glm(mpg~poly(horsepower, d), data=Auto)
cv.error10[d] = cv.glm(Auto, glm.fit, K=10)$delta[1]
}
lines(degree, cv.error10, type='b', col='red')
alpha <- function(x,y){
vx <- var(x)
vy <- var(y)
cxy <- cov(x, y)
(vy - cxy)/(vx + vy - 2*cxy)
}
alpha(Portfolio$X, Portfolio$Y)
alpha.fn <- function(data, index){
with(data[index,], alpha(X,Y))
}
alpha.fn(Portfolio, 1:100)
set.seed(1)
alpha.fn(Portfolio, sample(1:100, 100, replace = TRUE))
boot.out  <-  boot(Portfolio, alpha.fn, R=1000)
boot.out
plot(boot.out)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
summary(result)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
population = rnorm(1e6, mean=0, sd=1)
hist(population)
for i in (1:1000){}
for i in (1:1000){sample[i] = sample(population, 10)}
?for
sample_means <- rep(0, 1000)
for (i in 1:1000){samp <- sample(population, 10) sample_means[i]  <- mean(samp)}
for (i in 1:1000){
samp <- sample(population, 10)
sample_means[i]  <- mean(samp)
}
hist(sample_means)
?replicate
?t-test
t.test(sample_means, mu=0)
vapply(population,mean,1000)
?rep
x <- replicate(1000, mean(sample(population, 10)))
replicate(1000,t.test(x,mu=0))
replicate(1000,t.test(x,mu=0)$p.value)
hist(replicate(1000,t.test(x,mu=0)$p.value))
x <- replicate(1000, mean(sample(population, 10)))
hist(replicate(1000,t.test(x,mu=0)))
replicate(1000,t.test(x,mu=0))
x <- replicate(1000,t.test(sample(population,10))$p.value)
hist(x)
?t.test
x <- replicate(1000,t.test(sample(population,10), 0)$p.value)
hist(x)
x <- replicate(1000,t.test(sample(population,10), mu=3)$p.value)
hist(x)
?sapply
test <- sapply(100, sample(population, 10))
test <- vapply(100, sample(population, 10))
test <- sapply(100, sample(population, 10))
test <- sapply(100, mean(sample(population, 10)))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library("maps", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
?states
?map
data(countyMapEnv)
map('county', 'iowa', fill = TRUE, col = palette())
temp <- map('county', 'iowa', fill = TRUE, col = palette())
county.fips
data(county.fips)
?glm
shiny::runApp()
shiny::runApp()
?maps
??maps
?map
require(ISLR)
names(Smarket)
?Smarket
pairs(Smarket, col=Smarket$Direction)
# Logistic regressiong
glm.fit = glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,
data=Smarket, family=binomial)
summary(glm.fit)
glm.probs=predict(glm.fit, type='response')
glm.pred=ifelse(glm.probs>0.5, 'Up', 'Down')
attach(Smarket)
table(glm.pred, Direction)
mean(glm.pred==Direction)
shiny::runApp()
glm.fit = glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,
data=Smarket, family=binomial)
summary(glm.fit)
shiny::runApp()
shiny::runApp()
data.frame(result$Internet & result$price, )
data.frame(result$Internet, result$price)
result$Internet
data_frame(result$Internet, result$price)
?data.frame
data.frame(result$Internet & result$Price)
temp = data.frame(result$Internet & result$Price)
names(temp)
View(temp)
temp = data.frame(result$Internet, result$Price)
shiny::runApp()
shiny::runApp()
names(temp)[1]
data.frame(result$Cable.TV, result$Price)
shiny::runApp()
shiny::runApp()
ggplot(plotdata()) + geom_boxplot()
ggplot(temp) + geom_boxplot()
data.frame(feature=result$Internet, response=result$Price)
shiny::runApp()
shiny::runApp()
result[result$Location != 'Not Found', ]$Location
result[result$Location != 'Not Found', ]$Price
shiny::runApp()
shiny::runApp()
shiny::runApp()
?navbarPage
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
glm.fit = glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,
data=Smarket, family=binomial)
summary(glm.fit)
test <- lm(log(Price) ~ Beds + Breakfast + Cable.TV + Dryer + Essentials + Gym + Heating+ Internet + Kitchen + Pool, data=result)
summary(tets)
summary(test)
shiny::runApp()
result$Dryer
?VIF
?vif
library(MASS)
vif(test)
?vif
library("car", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
vif(test)
shiny::runApp()
test <- lm(log(Price) ~ Beds + Breakfast + Cable.TV + Dryer + Essentials + Gym + Heating+ Internet, data=result)
test
test <- lm(log(Price) ~ Beds + Breakfast + Cable.TV + Essentials + Gym + Heating+ Internet, data=result)
test
test <- lm(log(Price) ~ Beds + Breakfast + Cable.TV+ Gym + Heating+ Internet, data=result)
test
test <- lm(log(Price) ~ Beds + Breakfast + Cable.TV+ Internet, data=result)
summary(test)
plot(test$fit, test$res)
plot(test$Beds, test$res)
plot(result$Beds, test$res)
plot(result$Breakfast, test$res)
plot(result$Cable.TV, test$res)
plot(result$Cable.Internet, test$res)
plot(result$Internet, test$res)
test <- lm(Price/Beds ~ Breakfast + Cable.TV + Internet, data=result)
test
summary(test)
plot(test$fit, test$res)
hist(test$res)
test <- lm(log(Price/Beds) ~ Breakfast + Cable.TV + Internet, data=result)
with( result, hist(Price/Beds) )
with( result, hist(log(Price/Beds)) )
test <- lm(log(Price/Beds) ~ Breakfast + Cable.TV + Internet, data=result)
hist(test$res)
summary(test)
plot(result$Beds, test$res)
shiny::runApp()
shiny::runApp()
?sapply
require(ISLR)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
install.packages(leaps)
install.packages('leaps')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
result[result$Interent==1,]$Price
result[result$Internet==0,]$Price
shiny::runApp()
?gvisHistogram
shiny::runApp()
temp=list('w/o Internet'=result[result$Internet==0,]$Price,
'w/ Internet'=result[result$Internet==1,]$Price)
attributes(temp) <- list(names = names(temp),
row.names=1:max(length(x), length(y)), class='data.frame')
View(temp)
View(temp)
?addPolygon
class(names(result))
?save
shiny::runApp()
shiny::runApp()
shiny::runApp()
?%*%
%*%
?optim
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp(Airbnb, host='10.22.109.133', port='6588')
runApp('Airbnb', host='10.22.109.133', port='6588')
getwd()
setwd('../')
runApp('Airbnb', host='10.22.109.133', port='6588')
shiny::runApp('Airbnb', host='10.22.109.133')
?color*
color*
install.packages('rattle')
fancyRpartPlot(model)
?choosebest
?dbinom
setwd('../')
getwd()
str(wine)
wine = read.csv("data/whitewines.csv")
wine = read.csv("whitewines.csv")
getwd()

i = 2
sumeven = 0
x = 1:2
while (x[i] < 4e6) {
x [i+1] = x[i-1] + x[i]
i = i + 1
}
x = x[-i]
print(x)
for (i in 1:length(x)){
if (x[i] %% 2 == 0) {
cat(num, 'is odd')
}
}
i = 2
sumeven = 0
x = 1:2
while (x[i] < 4e6) {
x [i+1] = x[i-1] + x[i]
i = i + 1
}
x = x[-i]
print(x)
for (i in 1:length(x)){
if (x[i] %% 2 == 0) {
cat(x[i], 'is odd')
}
}
i = 2
sumeven = 0
x = 1:2
while (x[i] < 4e6) {
x [i+1] = x[i-1] + x[i]
i = i + 1
}
x = x[-i]
print(x)
for (i in 1:length(x)){
if (x[i] %% 2 == 0) {
sumeven = x[i] + sumeven
}
}
i = 2
sumeven = 0
x = 1:2
while (x[i] < 4e6) {
x [i+1] = x[i-1] + x[i]
i = i + 1
}
x = x[-i]
print(x)
for (i in 1:length(x)){
if (x[i] %% 2 == 0) {
sumeven = x[i] + sumeven
}
}
print sumeven
i = 2
sumeven = 0
x = 1:2
while (x[i] < 4e6) {
x [i+1] = x[i-1] + x[i]
i = i + 1
}
x = x[-i]
print(x)
for (i in 1:length(x)){
if (x[i] %% 2 == 0) {
sumeven = x[i] + sumeven
}
}
print (sumeven)
i = 2
sumeven = 2
x = 1:2
while (x[i] < 4e6) {
x [i+1] = x[i-1] + x[i]
if x [i+1] %% 2 == 0{
sumeven = sumeven + x [i+1]
}
i = i + 1
}
x = x[-i]
print(x)
print(sumeven)
i = 2
sumeven = 2
x = 1:2
while (x[i] < 4e6) {
x [i+1] = x[i-1] + x[i]
if x [i+1] %% 2 == 0{
sumeven = sumeven + x [i+1]
}
i = i + 1
}
x = x[-i]
print(x)
print(sumeven)
i = 2
sumeven = 2
x = 1:2
while (x[i] < 4e6) {
x [i+1] = x[i-1] + x[i]
if (x [i+1] %% 2 == 0) {
sumeven = sumeven + x [i+1]
}
i = i + 1
}
x = x[-i]
print(x)
print(sumeven)
x = 0
sumEuler = 0
while (x < 10) {
if (x %% 3 == 0) {
sumEuler = sumEuler + x
}
else if (x %% 5 == 0){
sumEuler = sumEuler + x
}
x = x + 1
}
print(sumEuler)
x = 0
sumEuler = 0
while (x < 1000) {
if (x %% 3 == 0) {
sumEuler = sumEuler + x
}
else if (x %% 5 == 0){
sumEuler = sumEuler + x
}
x = x + 1
}
print(sumEuler)
x = 0
sumEuler = 0
while (x < 1000) {
if (x %% 3 == 0) {
print(x)
sumEuler = sumEuler + x
}
else if (x %% 5 == 0){
print(x)
sumEuler = sumEuler + x
}
x = x + 1
}
print(sumEuler)
x = 13195
primeFactor = x - 1
while (x %% primeFactor == 0) {
primeFactor = primeFactor -1
}
print(sumEuler)
x = 13195
primeFactor = x - 1
while (x %% primeFactor == 0) {
primeFactor = primeFactor -1
}
print(primeFactor)
x = 13195
primeFactor = x - 1
while (x %% primeFactor != 0) {
primeFactor = primeFactor -1
}
print(primeFactor)
x = 13195
primeFactor = x - 1
while (x %% primeFactor != 0) {
primeFactor = primeFactor -1
}
print(primeFactor)
13195 / 2639
x = 600851475143
primeFactor = x - 1
while (x %% primeFactor != 0) {
primeFactor = primeFactor -1
}
x = 600851475143
primeFactor = x - 1
while (x %% primeFactor != 0) {
primeFactor = primeFactor -1
}
x = 100
primeFactor = x - 1
while (x %% primeFactor != 0) {
primeFactor = primeFactor -1
}
print(primeFactor)
test = 123
rev(test)
library(IRanges)
rev(test)
mad = function(x) {
return(median(x))
}
mad(c(1,2,3,4,5))
mad(c(1,2,3,4,9))
mad = function(x) {
for i in x[i]{
madi = abs(median(x) - x[i])
}
return(madi)
}
mad = function(x) {
for (i in 1:length(x)) {
madi = abs(median(x) - x[i])
}
return(madi)
}
mad(c(1,2,3,4,9))
mad = function(x) {
for (i in 1:length(x)) {
madi = madi + abs(median(x) - x[i])
}
return(madi)
}
mad(c(1,2,3,4,9))
mad = function(x) {
madi = 0
for (i in 1:length(x)) {
madi = madi + abs(median(x) - x[i])
}
return(madi)
}
mad(c(1,2,3,4,9))
mad = function(x) {
madi = 0
for (i in 1:length(x)) {
madi = madi + abs(median(x) - x[i])
}
return(median(madi))
}
mad(c(1,2,3,4,9))
mad = function(x) {
madi = 0
for (i in 1:length(x)) {
madi[i] = abs(median(x) - x[i])
}
return(median(madi))
}
mad(c(1,2,3,4,9))
mad(c(1,4,5,7,9))
install.packages("shiny")
install.packages(c("foreign", "manipulate", "RCurl", "stringi", "XML"))
install.packages("shiny")
library(shiny)
install.packages(shiny)
install.packages("shiny")
library(shiny)
install.packages(shiny)
install.packages("shiny")
library(shiny)
install.packages("shiny")
library(shiny)
install.packages("shiny")
library(shiny)
install.packages("shiny")
library("C:\Users\nicogirod\Documents\R\win-library\3.2\file176817b542e0\shiny")
library("C:/\Users\nicogirod\Documents\R\win-library\3.2\file176817b542e0\shiny")
library("C:\\Users\nicogirod\Documents\R\win-library\3.2\file176817b542e0\shiny")
library("C:\\Users\\nicogirod\\Documents\\R\\win-library\\3.2\\file176817b542e0\\shiny")
install.packages("shiny")
library(shiny)
library(shiny)
install.packages("shiny")
install.packages("mapproj")
library(mapproj)
library(shiny)
shiny::runApp('Dev DataScience/R/Project')
shiny::runApp('Dev DataScience/R/Project')
#First we import the 2 files
#Source: http://www.epa.gov/ampd/
emidata = read.csv("Data/emission_07-03-2015.csv")
facildata = read.csv("Data/facility_07-03-2015.csv")
library(dplyr)
emidata = tbl_df(emidata)
facildata = tbl_df(facildata)
#remove all doubles by using distinct ORIS
facildata = facildata %>% distinct(Facility.ID..ORISPL.)
#Then we agregate them in 1 table
sumdata=left_join(emidata,facildata,by = c("Facility.ID..ORISPL."))
#Lets clean this table
sumdata=mutate(sumdata, Period = as.Date(paste(sumdata$Year.x, sumdata$Month, 1, sep = "-")))
sumdata=select(sumdata,-c(Month,Year.x,Year.y,X.y,State.y,Facility.Name.y))
sumdata=rename(sumdata,State=State.x,Facility.Name=Facility.Name.x,Facility.ORIS.ID=Facility.ID..ORISPL.,
SO2.Tons = SO2..tons.,NOx.Tons = NOx..tons.,CO2.Short.Tons = CO2..short.tons.,
GrossLoad.MWh=Gross.Load..MW.h.,Representative.Primary=Representative..Primary.,
FuelType.Primary=Fuel.Type..Primary.)
View(sumdata)
setwd("~/Dev DataScience/R/Project")
#First we import the 2 files
#Source: http://www.epa.gov/ampd/
emidata = read.csv("Data/emission_07-03-2015.csv")
facildata = read.csv("Data/facility_07-03-2015.csv")
library(dplyr)
emidata = tbl_df(emidata)
facildata = tbl_df(facildata)
#remove all doubles by using distinct ORIS
facildata = facildata %>% distinct(Facility.ID..ORISPL.)
#Then we agregate them in 1 table
sumdata=left_join(emidata,facildata,by = c("Facility.ID..ORISPL."))
#Lets clean this table
sumdata=mutate(sumdata, Period = as.Date(paste(sumdata$Year.x, sumdata$Month, 1, sep = "-")))
sumdata=select(sumdata,-c(Month,Year.x,Year.y,X.y,State.y,Facility.Name.y))
sumdata=rename(sumdata,State=State.x,Facility.Name=Facility.Name.x,Facility.ORIS.ID=Facility.ID..ORISPL.,
SO2.Tons = SO2..tons.,NOx.Tons = NOx..tons.,CO2.Short.Tons = CO2..short.tons.,
GrossLoad.MWh=Gross.Load..MW.h.,Representative.Primary=Representative..Primary.,
FuelType.Primary=Fuel.Type..Primary.)
View(sumdata)
shiny::runApp()
shiny::runApp()
?s_summarise
shiny::runApp()
shiny::runApp()
cat("a","b")
shiny::runApp()
shiny::runApp()
View(sumdata)
shiny::runApp()
library(shiny)
library(leaflet)
library(RColorBrewer)
library(scales)
library(lattice)
# Helper functions that allow string arguments for  dplyr's data modification functions like arrange, select etc.
# Author: Sebastian Kranz
# Examples are below
#' Modified version of dplyr's filter that uses string arguments
#' @export
s_filter = function(.data, ...) {
eval.string.dplyr(.data,"filter", ...)
}
#' Modified version of dplyr's select that uses string arguments
#' @export
s_select = function(.data, ...) {
eval.string.dplyr(.data,"select", ...)
}
#' Modified version of dplyr's arrange that uses string arguments
#' @export
s_arrange = function(.data, ...) {
eval.string.dplyr(.data,"arrange", ...)
}
#' Modified version of dplyr's arrange that uses string arguments
#' @export
s_mutate = function(.data, ...) {
eval.string.dplyr(.data,"mutate", ...)
}
#' Modified version of dplyr's summarise that uses string arguments
#' @export
s_summarise = function(.data, ...) {
eval.string.dplyr(.data,"summarise", ...)
}
#' Modified version of dplyr's group_by that uses string arguments
#' @export
s_group_by = function(.data, ...) {
eval.string.dplyr(.data,"group_by", ...)
}
#' Internal function used by s_filter, s_select etc.
eval.string.dplyr = function(.data, .fun.name, ...) {
args = list(...)
args = unlist(args)
code = paste0(.fun.name,"(.data,", paste0(args, collapse=","), ")")
df = eval(parse(text=code,srcfile=NULL))
df
}
# Examples
library(dplyr)
# Original usage of dplyr
mtcars %.%
filter(gear == 3,cyl == 8) %.%
select(mpg, cyl, hp:vs)
# Select user specified cols.
# Note that you can have a vector of strings
# or a single string separated by ',' or a mixture of both
cols = c("mpg","cyl, hp:vs")
mtcars %.%
filter(gear == 3,cyl == 8) %.%
s_select(cols)
# Filter using a string
col = "gear"
mtcars %.%
s_filter(paste0(col,"==3"), "cyl==8" ) %.%
select(mpg, cyl, hp:vs)
# Arrange without using %.%
s_arrange(mtcars, "-mpg, gear, carb")
# group_by and summarise with strings
mtcars %.%
s_group_by("cyl") %.%
s_summarise("mean(disp), max(disp)")
library(dplyr)
shinyServer(function(input, output, session) {
## Interactive Map ###########################################
# Create the map
output$map <- renderLeaflet({
leaflet() %>%
addTiles(
urlTemplate = "//{s}.tiles.mapbox.com/v3/jcheng.map-5ebohr46/{z}/{x}/{y}.png",
attribution = 'Maps by <a href="http://www.mapbox.com/">Mapbox</a>'
) %>%
setView(lng = -70, lat = 37.45, zoom = 4)
})
output$lineHisto <- renderPlot({
colorBy <- input$color
groupseason = group_by(sumdata,Period)  %.%
seasonemi=s_summarise("GrossLoad.MWh")
ggplot(seasonemi,aes(x=Period,y=TotalColor)) +
geom_line()
})
output$scatterPower <- renderPlot({
colorBy <- input$color
sizeBy <- input$size
print(xyplot(as.formula(paste(colorBy ,"~", sizeBy)), data = sumdata, ))
})
# This observer is responsible for maintaining the circles and legend,
# according to the variables the user has chosen to map to color and size.
observe({
colorBy <- input$color
sizeBy <- input$size
colorData <- sumdata[[colorBy]]
pal <- colorBin("Spectral", colorData)
pal2 <- colorFactor("Spectral", colorData)
radius <- sumdata[[sizeBy]] / max(sumdata[[sizeBy]],na.rm=TRUE) * 100000
leafletProxy("map", data = sumdata) %>%
clearShapes() %>%
addCircles(~Facility.Longitude, ~Facility.Latitude, radius=radius, layerId=~Facility.Name,
stroke=FALSE, fillOpacity=0.4, fillColor=pal(colorData)) %>%
addLegend("bottomleft", pal=pal, values=colorData, title=colorBy,
layerId="colorLegend")
})
# Show a popup at the given location
showPlantPopup <- function(plantname, lat, lng) {
selectedPlant <- sumdata[sumdata$Facility.Name == plantname,]
content <- as.character(tagList(
tags$h4(plantname),tags$br(),
tags$strong(sprintf("Type: %s",unique(selectedPlant$FuelType.Primary))),tags$br(),
sprintf("Period Jan2009-Mar2015"), tags$br(),
sprintf("CO2 Emissions: %s s Tons", format(sum(selectedPlant$CO2.Short.Tons,na.rm=T),scientific=F,big.mark=",")), tags$br(),
sprintf("SO2 Emissions: %s Tons", format(sum(selectedPlant$SO2.Tons,na.rm=T),scientific=F,big.mark=",")), tags$br(),
sprintf("NOx Emissions: %s Tons", format(sum(selectedPlant$NOx.Tons,na.rm=T),scientific=F,big.mark=","))
))
leafletProxy("map") %>% addPopups(lng, lat, content, layerId = plantname)
}
# When map is clicked, show a popup with city info
observe({
leafletProxy("map") %>% clearPopups()
event <- input$map_shape_click
if (is.null(event))
return()
isolate({
showPlantPopup(event$id, event$lat, event$lng)
})
})
})
shiny::runApp()
shiny::runApp()
shiny::runApp()
?includes
filter(sumdata,Owner=New)
filter(sumdata,Owner=starts_with(New)
)
?grepl
filter(sumdata,grepl("New",Owner))
tot = filter(sumdata,grepl("Authority",Owner))
View(tot)
tot = filter(sumdata,grepl("New York Authority",Owner))
View(tot)
tot = filter(sumdata,grepl("New York Power Authority",Owner))
View(tot)
groupnypa=group_by(tot,Period)
nypasum=summarise(groupnypa,sum(CO2.Short.Tons))
qplot(Period,nypasum)
plot(Period,nypasum)
nypasum
plot(nypasum)
nypasum=summarise(groupnypa,sum(CO2.Short.Tons,na.rm=T))
nypasum
qplot(nypasum)
library(ggplot2)
qplot(nypasum)
qplot(Period,nypasum)
plot(nypasum)
qplot(nypasum$Period,nypasum)
qplot(nypasum)
nypasum
ggplot(nypasum)
ggplot(nypasum,aes(Period))+geom_line(aes(y=sum(CO2.Short.Tons)))
ggplot(nypasum,aes(Period))+geom_line(aes(y=sum(CO2.Short.Tons,na.rm=T)))
colnames(nypasum)
nypasum=summarise(groupnypa,co2=sum(CO2.Short.Tons,na.rm=T))
colnames(nypasum)
ggplot(nypasum,aes(Period))+geom_line(aes(y=sum(co2))
)
nypasum
ggplot(nypasum$Period,nypasum$co2)
ggplot(nypasum,aes(Period)) +
geom_line(aes(y=co2))
ggplot(nypasum,aes(Period)) +
geom_line(aes(y=co2),color=co2)
ggplot(nypasum,aes(Period)) +
geom_line(aes(y=co2),color="co2")
ggplot(nypasum,aes(Period)) +
geom_line(aes(y=co2),colour="co2")
ggplot(seasonemi,aes(Period)) +
geom_line(aes(y=total_emi, colour="CO2 in s Tons"))
ggplot(nypasum,aes(Period)) +
geom_line(aes(y=co2), colour="co2 in Tons")
ggplot(nypasum,aes(Period)) +
geom_line(aes(y=co2), colour=red)
ggplot(nypasum,aes(Period)) +
geom_line(aes(y=co2), colour="red")

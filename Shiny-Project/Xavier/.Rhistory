qplot(depth, data = diamonds, geom = "freqpoly",
color = cut, binwidth = 0.1) + zoom
qplot(depth, data = diamonds, geom = "freqpoly",
color = cut, binwidth = 1) + zoom
qplot(depth, data = diamonds, geom = "freqpoly",
color = cut, binwidth = .01) + zoom
qplot(carat, price, data = diamonds, alpha = I(0.1))
qplot(carat, price, data = diamonds, alpha = 0.1)
qplot(carat, price, data = diamonds, size = I(0.5))
qplot(carat, price, data = diamonds, size = 0.5)
?I
library(shiny)
runExample("01_hello")
library(ggplot2)
ggplot(data = iris, aes(x=Sepal.Width, y = Sepal.Length)) +
geom_bin2d
ggplot(data = iris, aes(x=Sepal.Width, y = Sepal.Length)) +
geom_bin2d()
ggplot(data = iris, aes(x=Sepal.Width, y = Sepal.Length)) +
geom_density2d()
ggplot(data = iris, aes(x=Sepal.Width, y = Sepal.Length), color=Species) +
geom_density2d()
ggplot(data = iris, aes(x=Sepal.Width, y = Sepal.Length)) +
geom_density2d() +
scale_color()
ggplot(data = iris, aes(x=Sepal.Width, y = Sepal.Length)) +
geom_density2d() +
scale_color_discrete()
ggplot(data = iris, aes(x=Sepal.Width, y = Sepal.Length)) +
geom_density2d() +
scale_color_discrete() +
geom_rug()
x <- ggplot(data = iris, aes(x=Sepal.Width, y = Sepal.Length)) +
geom_density2d() +
scale_color_discrete() +
geom_rug()
x
x <- ggplot(data = iris, aes(x=Sepal.Width, y = Sepal.Length, fill=Species)) +
geom_density2d() +
geom_rug()
x <- ggplot(data = iris, aes(x=Sepal.Width, y = Sepal.Length), fill=Species) +
geom_density2d() +
geom_rug()
x
x <- ggplot(data = iris, aes(x=Sepal.Width, y = Sepal.Length, fill=Species)) +
geom_density2d() +
geom_rug()
x
fit.linear = lm(dist ~ speed, data=cars)
fit.quadratic = lm(dist ~ speed + I(speed^2), data=cars)
ggplot(aes(fit.linear,fit.quadratic)) +
geom_line
ggplot(cars, aes(dist, speed)) +
geom_line
ggplot(data = cars, aes(dist, speed)) +
geom_line
ggplot(data = cars, aes(dist, speed)) +
geom_point
xor
?xor
x <- ggplot(cars,aes(x=dist,y=speed))+
geom_point()+
geom_smooth(data=cars, method = "lm",
formula = y ~ x,
se=FALSE,
aes(colour = "blue"),
linetype="dotted",
size=2,
label='toto') +
geom_smooth(data=cars, method = "lm",
formula = y ~ x + I(x^2),
se=FALSE,
aes(colour = "red"),
linetype="longdash",
size=2)+
scale_colour_manual(values = c("blue","red"),
labels = c("Linear","Quadratic"),
name = "")+
theme(legend.position = "right")
library(ggplot2)
x <- ggplot(cars,aes(x=dist,y=speed))+
geom_point()+
geom_smooth(data=cars, method = "lm",
formula = y ~ x,
se=FALSE,
aes(colour = "blue"),
linetype="dotted",
size=2,
label='toto') +
geom_smooth(data=cars, method = "lm",
formula = y ~ x + I(x^2),
se=FALSE,
aes(colour = "red"),
linetype="longdash",
size=2)+
scale_colour_manual(values = c("blue","red"),
labels = c("Linear","Quadratic"),
name = "")+
theme(legend.position = "right")
x
str(x)
x <- ggplot(cars,aes(x=dist,y=speed))+
geom_point()+
geom_smooth(data=cars, method = "lm",
formula = y ~ x,
se=FALSE,  linetype="dotted",
size=2,
label='toto', color='blue')
x
x <- ggplot(cars,aes(x=dist,y=speed))+
geom_point()+
geom_smooth(data=cars, method = "lm",
formula = y ~ x,
se=FALSE,  linetype="dotted",
size=2,
label='toto', color='blue') + geom_smooth(data=cars, method = "lm",
formula = y ~ x + I(x^2),
se=FALSE,
color = "red",
linetype="longdash",
size=2)+
scale_colour_manual(values = c("blue","red"),
labels = c("Linear","Quadratic"),
name = "")+
theme(legend.position = "right")
x
plot.new()
x<-curve(dbeta(x, 5, 2), from=0, to=1, col="blue")
curve(dbeta(x, 2, 6), from=0, to=1, add=TRUE, col="red", lty='1399')
curve(dbeta(x, 4, 4), from=0, to=1, add=TRUE, col="yellow")
curve(dbeta(x, 6, 2), from=0, to=1, add=TRUE, col="violet")
title(expression(f(y)==frac(1,B(a,b))*y^{a-1}*(1-y)^{b-1}))
#legend(0,2.5,c("B5,2","B2,6","B4,4","B6,2"),lty=c(1,1,1,1),col=c("blue","red","yellow","violet"))
legend()
plot.new()
x<-curve(dbeta(x, 5, 2), from=0, to=1, col="blue")
curve(dbeta(x, 2, 6), from=0, to=1, add=TRUE, col="red", lty='1399')
curve(dbeta(x, 4, 4), from=0, to=1, add=TRUE, col="yellow")
curve(dbeta(x, 6, 2), from=0, to=1, add=TRUE, col="violet")
title(expression(f(y)==frac(1,B(a,b))*y^{a-1}*(1-y)^{b-1}))
legend(0,2.5,c("B5,2","B2,6","B4,4","B6,2"),lty=c(1,1,1,1),col=c("blue","red","yellow","violet"))
legend()
library(shiny)
library(ISLR)
data(Wage)
x = subset(Wage, education=='4. College Grad', select='wage')
shapiro.test(x)
x = unlist(x)
shapiro.test(x)
?read.csv
?read.delim
df <- data.frame(
color = c("blue", "black", "blue", "blue", "black"),
value = 1:5)
tbl <- tbl_df(df)
by_color <- group_by(tbl, color)
library(dplyr)
df <- data.frame(
color = c("blue", "black", "blue", "blue", "black"),
value = 1:5)
tbl <- tbl_df(df)
by_color <- group_by(tbl, color)
by_color
tbl
crime <- read.csv("slides.nycdatascience.com/R2days/Day2/part4/data/crime.csv")
head(crime)
crime <- read.csv("http://slides.nycdatascience.com/R2days/Day2/part4/data/crime.csv")
head(crime)
wages <- read.csv("http://slides.nycdatascience.com/R2days/Day2/part4/data/wages.csv")
head(wages)
crime
mod <- lm(tc2009 ~ low, data = crime)
mod
summary(mod)
predict(mod)
resid(mod)
plot(lm(tc2009 ~ 0 + low, data = crime))
install.packages("leaps")
library(leaps)
?regsubsets
url         :  {lib: libraries}
js:  libraries.js
---
ekafhoewa
x <- data.frame(z = numeric(1,2,3,4), q = c("hello","good", "g","h"))
x <- data.frame(z = c(1,2,3,4), q = c("hello","good", "g","h"))
x$z <- as.numeric(x$z)
x
class(x$z)
library(dplyr)
filter(x, z > 2)
library(ggplot2)
qplot(rnorm(n = 10000), geom = "line")
qplot(rnorm(n = 10000), geom = "histogram")
qplot(rnorm(n = 10000), geom = "line")
qplot(rnorm(n = 10000), geom = "freqpoly")
qplot(rnorm(n = 10000), geom = "curve")
qplot(dnorm(n = 10000), geom = "line")
qplot(dnorm(x = 100), geom = "line")
qplot(rnorm(10000), geom = "line")
qplot(rnorm(10000), geom = "freqpoly")
qplot(rnorm(100000), geom = "freqpoly")
?do.call
shiny::runApp('Desktop/test_shiny')
r_raw <- read.csv('data/receipts.csv', colClasses='character')
r_nums <- as.data.frame(sapply(r_raw[13:72], FUN = function(x) as.numeric(gsub(",", "", x))))
receipts <- cbind(r_raw[1:12], r_nums)
r_years = grep('^X[1-2][0-9][0-9][0-9]',names(receipts))
r_indices = grep('.name$|.Budget$',names(receipts))
library(shiny)
shiny::runApp('Desktop/test_shiny')
names(receipts)[r_indices]
shiny::runApp('Desktop/test_shiny')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
?oneway.test
?aov
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
election2013 <- read.csv("2013_elections.csv")
ls
getwd()
setwd("/Users/andrew/Downloads/")
election2013 <- read.csv("2013_elections.csv")
setwd("/Users/andrew/Desktop/Github/Elections/")
election2013 <- read.csv("2013_elections.csv")
sort(unique(election2013$RECIPNAME))
head(election2013)
unique(election2013$ELECTION)
library(dplyr)
library(reshape2)
library(dplyr)
by_recipient <- group_by(RECIPIENT, election2013)
by_recipient <- group_by(RECIPNAME, election2013)
by_recipient <- group_by(RECIPNAME, data=election2013)
colnames(election2013)
?GROUP_BY
?group_by
by_recipient <- group_by(election2013, RECIPNAME)
tester <- summarise(by_recipient, total.funding.received = sum(AMNT))
tester
funding <- summarise(by_recipient, total.funding.received = desc(sum(AMNT)))
head(funding)
funding <- summarise(by_recipient, total.funding.received = desc(sum(as.numeric(AMNT))))
head(funding)
class(election2013$AMNT)
funding <- summarise(by_recipient, total.funding.received = sum(as.numeric(AMNT)))
funding <- summarise(by_recipient, total.funding.received = sum(as.numeric(AMNT)))
funding <- arrange(funding, desc(total.funding.received))
head(funding)
head(election2013)
unique(election2013$OFFICECD)
by_recipient <- group_by(election2013, RECIPNAME)
funding.recip <- summarise(by_recipient, total.funding.received = sum(as.numeric(AMNT))) %>%
arrange(., desc(total.funding.received))
by_office <- group_by(election2013, OFFICECD)
funding.office <- summarise(by_recipient, total.funding.received = sum(as.numeric(AMNT))) %>%
arrange(., desc(total.funding.received))
funding.office
by_recipient <- group_by(election2013, RECIPNAME)
funding.recip <- summarise(by_recipient, total.funding.received = sum(as.numeric(AMNT))) %>%
arrange(., desc(total.funding.received))
by_office <- group_by(election2013, OFFICECD)
funding.office <- summarise(by_office, total.funding.received = sum(as.numeric(AMNT))) %>%
arrange(., desc(total.funding.received))
funding.office
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?shinyServer
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?group_by
shiny::runApp()
shiny::runApp()
by_choice <- group_by(election2013, recipname)
funding <- summarise(by_choice, funding = sum(amnt))
head(funding)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(shiny)
library(dplyr)
library(reshape2)
shiny::runApp()
library(MASS)
head(Boston)
length(which(is.na(Boston)))
## no NAs
plot(Boston$medv, Boston$lstat)
model= lm(medv ~ lstat, data=Boston)
modelpoly= lm(medv~poly(lstat,10),data= Boston)
summary(modelpoly)
## better fit of the model up to degree 5.
library(splines)
mod <- lm(medv ~ ns(lstat, df=10), data = Boston)
prey = predict(mod, newdata = list(Boston$lstat))
library(MASS)
head(Boston)
length(which(is.na(Boston)))
## no NAs
plot(Boston$medv, Boston$lstat)
model= lm(medv ~ lstat, data=Boston)
modelpoly= lm(medv~poly(lstat,10),data= Boston)
summary(modelpoly)
## better fit of the model up to degree 5.
library(splines)
mod <- lm(medv ~ ns(lstat, df=10), data = Boston)
mod
prey = predict(mod, newdata = list(Boston$lstat))
mod <- lm(medv ~ ns(lstat, df=10), data = Boston)
prey = predict(mod, newdata = list(Boston$lstat))
prey = predict(mod, newdata = Boston$lstat)
mod <- lm(medv ~ ns(Boston$lstat, df=10), data = Boston)
prey = predict(mod, newdata = list(Boston$lstat))
prey
?ns
install.packages("fastcluster")
shiny::runApp('~/Desktop/Github/Statistical-Visualizations/stats-app')
library(shiny)
?reactiveFileReader
getwd()
setwd("/Users/andrew/Desktop/Github/Bootcamp2-Project/Shiny-Project/Xavier/")
fileData <- reactiveFileReader(1000, session, 'data/mtaRealTime.txt',read.csv)
head(fileData)
fileData <- read.csv("data/mtaRealTime.txt")
head(fileData)
fileData[,9]
fileData <- read.csv("data/mtaRealTime.txt", header = FALSE)
head(fileData)
shiny::runApp()
install.packages("RPython")
install.packages("rPython")
library(rPython)
getwd()
library(rPython)
python.load("mtaRealTime.py")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()

ggsave("blah.pdf")
getwd
getwd()
qplot(x, z, data = diamonds)
qplot(x, data = diamonds)
qplot(cut, data = diamonds)
?geom_density
geom_freqpoly
?geom_freqpoly
qplot(depth, data = diamonds, geom = "freqpoly",
color = cut, binwidth = 0.2) + zoom
qplot(depth, data = diamonds, geom = "freqpoly",
color = cut, binwidth = 0.1) + zoom
qplot(depth, data = diamonds, geom = "freqpoly",
color = cut, binwidth = 1) + zoom
qplot(depth, data = diamonds, geom = "freqpoly",
color = cut, binwidth = .01) + zoom
qplot(carat, price, data = diamonds, alpha = I(0.1))
qplot(carat, price, data = diamonds, alpha = 0.1)
qplot(carat, price, data = diamonds, size = I(0.5))
qplot(carat, price, data = diamonds, size = 0.5)
?I
library(shiny)
runExample("01_hello")
library(ggplot2)
ggplot(data = iris, aes(x=Sepal.Width, y = Sepal.Length)) +
geom_bin2d
ggplot(data = iris, aes(x=Sepal.Width, y = Sepal.Length)) +
geom_bin2d()
ggplot(data = iris, aes(x=Sepal.Width, y = Sepal.Length)) +
geom_density2d()
ggplot(data = iris, aes(x=Sepal.Width, y = Sepal.Length), color=Species) +
geom_density2d()
ggplot(data = iris, aes(x=Sepal.Width, y = Sepal.Length)) +
geom_density2d() +
scale_color()
ggplot(data = iris, aes(x=Sepal.Width, y = Sepal.Length)) +
geom_density2d() +
scale_color_discrete()
ggplot(data = iris, aes(x=Sepal.Width, y = Sepal.Length)) +
geom_density2d() +
scale_color_discrete() +
geom_rug()
x <- ggplot(data = iris, aes(x=Sepal.Width, y = Sepal.Length)) +
geom_density2d() +
scale_color_discrete() +
geom_rug()
x
x <- ggplot(data = iris, aes(x=Sepal.Width, y = Sepal.Length, fill=Species)) +
geom_density2d() +
geom_rug()
x <- ggplot(data = iris, aes(x=Sepal.Width, y = Sepal.Length), fill=Species) +
geom_density2d() +
geom_rug()
x
x <- ggplot(data = iris, aes(x=Sepal.Width, y = Sepal.Length, fill=Species)) +
geom_density2d() +
geom_rug()
x
fit.linear = lm(dist ~ speed, data=cars)
fit.quadratic = lm(dist ~ speed + I(speed^2), data=cars)
ggplot(aes(fit.linear,fit.quadratic)) +
geom_line
ggplot(cars, aes(dist, speed)) +
geom_line
ggplot(data = cars, aes(dist, speed)) +
geom_line
ggplot(data = cars, aes(dist, speed)) +
geom_point
xor
?xor
x <- ggplot(cars,aes(x=dist,y=speed))+
geom_point()+
geom_smooth(data=cars, method = "lm",
formula = y ~ x,
se=FALSE,
aes(colour = "blue"),
linetype="dotted",
size=2,
label='toto') +
geom_smooth(data=cars, method = "lm",
formula = y ~ x + I(x^2),
se=FALSE,
aes(colour = "red"),
linetype="longdash",
size=2)+
scale_colour_manual(values = c("blue","red"),
labels = c("Linear","Quadratic"),
name = "")+
theme(legend.position = "right")
library(ggplot2)
x <- ggplot(cars,aes(x=dist,y=speed))+
geom_point()+
geom_smooth(data=cars, method = "lm",
formula = y ~ x,
se=FALSE,
aes(colour = "blue"),
linetype="dotted",
size=2,
label='toto') +
geom_smooth(data=cars, method = "lm",
formula = y ~ x + I(x^2),
se=FALSE,
aes(colour = "red"),
linetype="longdash",
size=2)+
scale_colour_manual(values = c("blue","red"),
labels = c("Linear","Quadratic"),
name = "")+
theme(legend.position = "right")
x
str(x)
x <- ggplot(cars,aes(x=dist,y=speed))+
geom_point()+
geom_smooth(data=cars, method = "lm",
formula = y ~ x,
se=FALSE,  linetype="dotted",
size=2,
label='toto', color='blue')
x
x <- ggplot(cars,aes(x=dist,y=speed))+
geom_point()+
geom_smooth(data=cars, method = "lm",
formula = y ~ x,
se=FALSE,  linetype="dotted",
size=2,
label='toto', color='blue') + geom_smooth(data=cars, method = "lm",
formula = y ~ x + I(x^2),
se=FALSE,
color = "red",
linetype="longdash",
size=2)+
scale_colour_manual(values = c("blue","red"),
labels = c("Linear","Quadratic"),
name = "")+
theme(legend.position = "right")
x
plot.new()
x<-curve(dbeta(x, 5, 2), from=0, to=1, col="blue")
curve(dbeta(x, 2, 6), from=0, to=1, add=TRUE, col="red", lty='1399')
curve(dbeta(x, 4, 4), from=0, to=1, add=TRUE, col="yellow")
curve(dbeta(x, 6, 2), from=0, to=1, add=TRUE, col="violet")
title(expression(f(y)==frac(1,B(a,b))*y^{a-1}*(1-y)^{b-1}))
#legend(0,2.5,c("B5,2","B2,6","B4,4","B6,2"),lty=c(1,1,1,1),col=c("blue","red","yellow","violet"))
legend()
plot.new()
x<-curve(dbeta(x, 5, 2), from=0, to=1, col="blue")
curve(dbeta(x, 2, 6), from=0, to=1, add=TRUE, col="red", lty='1399')
curve(dbeta(x, 4, 4), from=0, to=1, add=TRUE, col="yellow")
curve(dbeta(x, 6, 2), from=0, to=1, add=TRUE, col="violet")
title(expression(f(y)==frac(1,B(a,b))*y^{a-1}*(1-y)^{b-1}))
legend(0,2.5,c("B5,2","B2,6","B4,4","B6,2"),lty=c(1,1,1,1),col=c("blue","red","yellow","violet"))
legend()
library(shiny)
library(ISLR)
data(Wage)
x = subset(Wage, education=='4. College Grad', select='wage')
shapiro.test(x)
x = unlist(x)
shapiro.test(x)
?read.csv
?read.delim
df <- data.frame(
color = c("blue", "black", "blue", "blue", "black"),
value = 1:5)
tbl <- tbl_df(df)
by_color <- group_by(tbl, color)
library(dplyr)
df <- data.frame(
color = c("blue", "black", "blue", "blue", "black"),
value = 1:5)
tbl <- tbl_df(df)
by_color <- group_by(tbl, color)
by_color
tbl
crime <- read.csv("slides.nycdatascience.com/R2days/Day2/part4/data/crime.csv")
head(crime)
crime <- read.csv("http://slides.nycdatascience.com/R2days/Day2/part4/data/crime.csv")
head(crime)
wages <- read.csv("http://slides.nycdatascience.com/R2days/Day2/part4/data/wages.csv")
head(wages)
crime
mod <- lm(tc2009 ~ low, data = crime)
mod
summary(mod)
predict(mod)
resid(mod)
plot(lm(tc2009 ~ 0 + low, data = crime))
install.packages("leaps")
library(leaps)
?regsubsets
url         :  {lib: libraries}
js:  libraries.js
---
ekafhoewa
x <- data.frame(z = numeric(1,2,3,4), q = c("hello","good", "g","h"))
x <- data.frame(z = c(1,2,3,4), q = c("hello","good", "g","h"))
x$z <- as.numeric(x$z)
x
class(x$z)
library(dplyr)
filter(x, z > 2)
library(ggplot2)
qplot(rnorm(n = 10000), geom = "line")
qplot(rnorm(n = 10000), geom = "histogram")
qplot(rnorm(n = 10000), geom = "line")
qplot(rnorm(n = 10000), geom = "freqpoly")
qplot(rnorm(n = 10000), geom = "curve")
qplot(dnorm(n = 10000), geom = "line")
qplot(dnorm(x = 100), geom = "line")
qplot(rnorm(10000), geom = "line")
qplot(rnorm(10000), geom = "freqpoly")
qplot(rnorm(100000), geom = "freqpoly")
?do.call
shiny::runApp('Desktop/test_shiny')
r_raw <- read.csv('data/receipts.csv', colClasses='character')
r_nums <- as.data.frame(sapply(r_raw[13:72], FUN = function(x) as.numeric(gsub(",", "", x))))
receipts <- cbind(r_raw[1:12], r_nums)
r_years = grep('^X[1-2][0-9][0-9][0-9]',names(receipts))
r_indices = grep('.name$|.Budget$',names(receipts))
library(shiny)
shiny::runApp('Desktop/test_shiny')
names(receipts)[r_indices]
shiny::runApp('Desktop/test_shiny')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
?oneway.test
?aov
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
shiny::runApp('Desktop/Github/Statistical-Visualizations/stats-app')
system(RPYTHON_PYTHON_VERSION="2.7.10")
Sys.setenv(RPYTHON_PYTHON_VERSION="2.7.10")
install.packages("rPython")
getwd()
setwd("/Users/andrew/Desktop/Github/Bootcamp2-Project/Shiny-Project/Xavier/")
library(rPython)
python.load("mtaRealTime.py")
system("/Users/andrew/anaconda/bin/python mtaRealTime.py")
tester <- system("/Users/andrew/anaconda/bin/python mtaRealTime.py")
head(tester)
system("/Users/andrew/anaconda/bin/python mtaRealTime.py")
tester <- python.get(system("/Users/andrew/anaconda/bin/python mtaRealTime.py"))
tester
?dump
robust.system <- function (cmd) {
stderrFile = tempfile(pattern="R_robust.system_stderr", fileext=as.character(Sys.getpid()))
stdoutFile = tempfile(pattern="R_robust.system_stdout", fileext=as.character(Sys.getpid()))
retval = list()
retval$exitStatus = system(paste0(cmd, " 2> ", shQuote(stderrFile), " > ", shQuote(stdoutFile)))
retval$stdout = readLines(stdoutFile)
retval$stderr = readLines(stderrFile)
unlink(c(stdoutFile, stderrFile))
return(retval)
}
tester <- robust.system("/Users/andrew/anaconda/bin/python mtaRealTime.py")
head(tester)
tester2 <- system("/Users/andrew/anaconda/bin/python mtaRealTime.py", internal=TRUE)
tester2 <- system("/Users/andrew/anaconda/bin/python mtaRealTime.py", intern=TRUE)
head(tester2)
shiny::runApp()
fileData <- system("/Users/andrew/anaconda/bin/python mtaRealTime.py")
fileData
fileData <- system("/Users/andrew/anaconda/bin/python mtaRealTime.py")
class(fileData)
fileData <- system("/Users/andrew/anaconda/bin/python mtaRealTime.py")
filData
fileData
fileData <- system("/Users/andrew/anaconda/bin/python mtaRealTime.py")
tester10 <- read.table(fileData, sep = ",")
tester10 <- read.table(system("/Users/andrew/anaconda/bin/python mtaRealTime.py"), sep = ",")
fileData <- system("/Users/andrew/anaconda/bin/python mtaRealTime.py")
tester10 <- sapply(X = fileData,FUN = split(., sep = ","))
tester10 <- sapply(X = fileData,FUN = split(X, sep = ","))
tester10 <- sapply(X = fileData,FUN = split(x, sep = ","))
?sapply
tester10 <- sapply(fileData,split( sep = ","))
tester10 <- sapply(fileData,split())
tester10 <- sapply(fileData,function x {split(x, sep=",")})
tester10 <- sapply(fileData,function x split(x, sep=","))
x <- read.csv(fileData)
tester10 <- sapply(fileData,function x strsplit(x, sep=","))
tester10 <- sapply(fileData,strsplit(x, sep=","))
tester10 <- sapply(fileData,strsplit(sep=","))
tester10 <- sapply(fileData,strsplit())
tester10 <- sapply(fileData,function x strsplit(x))
tester10 <- sapply(fileData, function x {strsplit(x)})
sapply(strsplit, fileData)
splitter <- strsplit(TEXT, ",")
splitter <- strsplit(fileData, ",")
splitter <- strsplit(as.character(fileData), ",")
head(splitter)
sapply(strsplit(as.character(fileData), ",")
)
sapply(strsplit(as.character(fileData), "\\."), function(x) x[[2]])
df <- data.frame(fileData)
df
fileData
fileData <- system("/Users/andrew/anaconda/bin/python mtaRealTime.py")
fileData <- data.frame(system("/Users/andrew/anaconda/bin/python mtaRealTime.py"))
fileData
fileData <- system("/Users/andrew/anaconda/bin/python mtaRealTime.py")
head(fileData)
fileData
fileData <- system("/Users/andrew/anaconda/bin/python mtaRealTime.py")
fileData
fileData <- system("/Users/andrew/anaconda/bin/python mtaRealTime.py")
fileData
system("/Users/andrew/anaconda/bin/python mtaRealTime.py", intern=TRUE)
sapply(fileData,strplit())
sapply(fileData,strplit(fileData,sep=","))
sapply(fileData,strsplit(fileData,sep=","))
sapply(fileData,strsplit(x))
sapply(fileData,strsplit())
sapply(fileData, function x {strsplit()})
sapply(fileData)
sapply(fileData, FUN=split)
sapply(fileData, FUN=split(x))
sapply(fileData, FUN=split(fileData,","))
sapply(fileData, FUN=split(fileData))
sapply(fileData, FUN=function x {split(fileData)})
sapply(fileData, function x ={split(fileData)})
sapply(fileData, function x {split(fileData)})
fileData <- data.frame(fileData)
head(fileData)
fileData <- system("/Users/andrew/anaconda/bin/python mtaRealTime.py", intern=TRUE)
fileData
class(fileData)
split(fileData,",")
tester <- split(fileData,",")
head(tester)
tester <- sapply(fileData, split(fileData,","))
head(fileData)
?sapply
strsplit(fileData[1],sep=",")
strsplit(fileData[1],split = ",")
sapply(fileData,strsplit(split = ","))
sapply(fileData,strsplit(fileData,split = ","))
sapply(fileData,strsplit(.,split = ","))
sapply(fileData,strsplit(x,split = ","))
sapply(fileData,function x strsplit(x,split = ","))
sapply(fileData,function (x) strsplit(x,split = ","))
tester <- sapply(fileData,function (x) strsplit(x,split = ","))
head(tester)
try2 <- data.frame(tester)
head(try2)
try2 <- data.frame(tester,colnames=FALSE)
head(try2)
tester <- sapply(fileData,function (x) {as.data.frame(strsplit(x,split = ",")}, row.names = NULL) )
tester <- sapply(fileData,function (x) {as.data.frame(strsplit(x,split = ",")}, row.names = NULL) )
tester <- sapply(fileData,function (x) {as.data.frame(strsplit(x,split = ","), row.names = NULL)} )
head(tester)
tester <- sapply(fileData,function (x) {strsplit(x,split = ",")} )
head(tester)
head(data.frame(tester))
head(data.frame(tester,colnames=1:10))
head(data.frame(tester,colnames=1:8))
head(data.frame(1 = tester))
head(data.frame(1:8 = tester))
head(data.frame(c(1:8) = tester))
head(data.frame(tester, col=1:8))
head(data.frame(tester))
colnames(tester) <- 1:8
colnames(tester) <- c(1:8)
names(tester) <- c(1:8)
head(tester)
fileData <- system("/Users/andrew/anaconda/bin/python mtaRealTime.py", intern=TRUE)
tester <- sapply(fileData,function (x) {strsplit(x,split = ",")} )
names(tester) <- c(1:8)
tester <- data.frame(tester)
head(tester)
fileData <- system("/Users/andrew/anaconda/bin/python mtaRealTime.py", intern=TRUE)
tester <- sapply(fileData,function (x) {strsplit(x,split = ",")} )
dim(tester)
tester
unlist(tester)
fileData <- system("/Users/andrew/anaconda/bin/python mtaRealTime.py", intern=TRUE)
tester <- sapply(fileData,function (x) {strsplit(x,split = ",")} )
rbindlist(tester)
do.call(tester, rbind)
do.call(tester, list(rbind))
do.call(rbind, "tester")
do.call(rbind, tester)
try2<- data.frame(do.call(rbind, tester))
head(try2)
try2<- do.call(data.frame(rbind), tester)
try2<- data.frame(rbind)
head(try2)
try2<- data.frame(tester)
head(try2)
t(try2)
head(t(try2))
t(tester)
head(tester)
tester[1]
fileData <- system("/Users/andrew/anaconda/bin/python mtaRealTime.py", intern=TRUE)
tester <- sapply(fileData,function (x) {strsplit(x,split = ",")} )
df <- data.frame()
for(i in 1:length(tester)) {
df[i] <- data.frame(tester[i])
}
warnings()
fileData <- system("/Users/andrew/anaconda/bin/python mtaRealTime.py", intern=TRUE)
tester <- sapply(fileData,function (x) {strsplit(x,split = ",")} )
df <- data.frame(,1:8)
for(i in 1:length(tester)) {
df[i] <- data.frame(tester[i])
}
data.frame(1:8)
df <- data.frame()
ncol(df) <- 8
nco    df <- matrix(ncol = 8)
df <- matrix(ncol = 8)
df
fileData <- system("/Users/andrew/anaconda/bin/python mtaRealTime.py", intern=TRUE)
tester <- sapply(fileData,function (x) {strsplit(x,split = ",")} )
df <- matrix(ncol = 8)
for(i in 1:length(tester)) {
df[i] <- data.frame(tester[i])
}
df
fileData <- system("/Users/andrew/anaconda/bin/python mtaRealTime.py", intern=TRUE)
tester <- sapply(fileData,function (x) {strsplit(x,split = ",")} )
df <- matrix(ncol = 8)
for(i in 1:length(tester)) {
df[i] <- vector(tester[i])
}
fileData <- system("/Users/andrew/anaconda/bin/python mtaRealTime.py", intern=TRUE)
tester <- sapply(fileData,function (x) {strsplit(x,split = ",")} )
df <- matrix(ncol = 8)
for(i in 1:length(tester)) {
df[i] <- tester[i]
}
df
fileData <- system("/Users/andrew/anaconda/bin/python mtaRealTime.py", intern=TRUE)
tester <- sapply(fileData,function (x) {strsplit(x,split = ",")} )
df <- matrix(ncol = 8)
for(i in 1:length(tester)) {
df[i] <- tester[[i]]
}
df
tester[1]
tester[[1]]
df <- as.data.frame(matrix(ncol = 8))
df
fileData <- system("/Users/andrew/anaconda/bin/python mtaRealTime.py", intern=TRUE)
tester <- sapply(fileData,function (x) {strsplit(x,split = ",")} )
df <- as.data.frame(matrix(ncol = 8))
for(i in 1:length(tester)) {
df[i] <- tester[[i]]
}
df
fileData <- system("/Users/andrew/anaconda/bin/python mtaRealTime.py", intern=TRUE)
tester <- sapply(fileData,function (x) {strsplit(x,split = ",")} )
df <- as.data.frame(matrix(ncol = 8))
for(i in 1:length(tester)) {
df[i] <- rbind(df,tester[[i]])
}
df
fileData <- system("/Users/andrew/anaconda/bin/python mtaRealTime.py", intern=TRUE)
tester <- sapply(fileData,function (x) {strsplit(x,split = ",")} )
df <- as.data.frame(matrix(ncol = 8))
for(i in 1:length(tester)) {
df <- rbind(df,tester[[i]])
}
df
fileData <- system("/Users/andrew/anaconda/bin/python mtaRealTime.py", intern=TRUE)
tester <- sapply(fileData,function (x) {strsplit(x,split = ",")} )
df <- data.frame()#as.data.frame(matrix(ncol = 8))
for(i in 1:length(tester)) {
df <- rbind(df,tester[[i]])
}
df
df <- as.data.frame(matrix(ncol = 8))
as.data.frame(matrix(ncol = 8,nrow=0))
fileData <- system("/Users/andrew/anaconda/bin/python mtaRealTime.py", intern=TRUE)
tester <- sapply(fileData,function (x) {strsplit(x,split = ",")} )
df <- as.data.frame(matrix(ncol = 8,nrow=0))
for(i in 1:length(tester)) {
df <- rbind(df,tester[[i]])
}
df
fileData <- system("/Users/andrew/anaconda/bin/python mtaRealTime.py", intern=TRUE)
tester <- sapply(fileData,function (x) {strsplit(x,split = ",")} )
df <- as.data.frame(matrix(ncol = 8))
for(i in 1:length(tester)) {
df <- rbind(df,tester[[i]])
}
df
df[1,]
fileData <- system("/Users/andrew/anaconda/bin/python mtaRealTime.py", intern=TRUE)
tester <- sapply(fileData,function (x) {strsplit(x,split = ",")} )
df <- as.data.frame(matrix(ncol = 8))
for(i in 1:length(tester)) {
df <- rbind(df,tester[[i]])
}
df[1,] <- NULL
df
head(df)
df <- df[-1,]
head(df)
shiny::runApp()
shiny::runApp()
shiny::runApp()

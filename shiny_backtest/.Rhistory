data(gasoline)
library(pls)
pcrModel = pcr(octane ~ NIR,
ncomp=10,
data=gasoline)
plsrModel = plsr(octane ~ NIR,
ncomp=10,
data=gasoline)
head(gasoline)
summary(pcrModel)
temp = list()
i=4
temp[[i]] = c(rep('x',times=i), rep('y',times=10-i))
table( temp[[i]] )
refund = c('yes', 'no', 'no', 'yes', 'no', 'no', 'yes', 'no', 'no', 'no')
mstatus = c('single', 'married', 'single', 'married', 'divorced', 'married',
'divorced', 'single', 'married', 'single')
income = c(125, 100, 70, 120, 95, 60, 220, 85, 75, 90)
cheat = c('no', 'no', 'no', 'no', 'yes', 'no', 'no', 'yes', 'no', 'yes')
data = data.frame(refund, mstatus, income, cheat)
library(rpart)
model = rpart(cheat ~ ., data=data, control=rpart.control(minbucket=1))
gini_p = gini(data$cheat)
gini = function(x) {
labelcounts = table(x)
prob = labelcounts / sum(labelcounts)
ginivalue = 1 - sum(prob^2)
return(ginivalue)
}
temp = list()
for(i in 1:9) {
temp[[i]] = c(rep('x',times=i), rep('y',times=10-i))
}
sapply(temp, gini)
gini_p = gini(data$cheat)
gini_p = gini(data$cheat)
#gini children
node1 = data[data$refund=='yes', ]
node2 = data[data$refund=='no', ]
gini_1 = gini(node1$cheat)
gini_2 = gini(node2$cheat)
#gini weights
gini_w = (nrow(node1)*gini_1 + nrow(node2)*gini_2) / nrow(data)
gini_gain_refund = gini_p - gini_w
gini_gain_refund
log(4,2)
shiny::runApp('Desktop/BootCamp/My_App/proj2')
shiny::runApp('Desktop/BootCamp/My_App/proj2')
shiny::runApp('Desktop/BootCamp/My_App/test')
shiny::runApp('Desktop/BootCamp/My_App/test')
shiny::runApp('Desktop/BootCamp/My_App/test')
shiny::runApp('Desktop/BootCamp/My_App/test')
shiny::runApp('Desktop/BootCamp/My_App/test')
shiny::runApp('Desktop/BootCamp/My_App/test')
shiny::runApp('Desktop/BootCamp/My_App/test')
shiny::runApp('Desktop/BootCamp/My_App/test')
shiny::runApp('Desktop/BootCamp/My_App/test')
shiny::runApp('Desktop/BootCamp/My_App/test')
shiny::runApp('Desktop/BootCamp/My_App/test')
shiny::runApp('Desktop/BootCamp/My_App/test')
shiny::runApp('Desktop/BootCamp/My_App/proj2')
shiny::runApp('Desktop/BootCamp/My_App/test')
shiny::runApp('Desktop/BootCamp/My_App/test')
shiny::runApp('Desktop/BootCamp/My_App/test')
shiny::runApp('Desktop/BootCamp/My_App/test')
chartSeries
?chartSeries
shiny::runApp('Desktop/BootCamp/My_App/test')
shiny::runApp('Desktop/BootCamp/My_App/test')
shiny::runApp('Desktop/BootCamp/My_App/test')
shiny::runApp('Desktop/BootCamp/My_App/test')
addBBands
?addBBands
shiny::runApp('Desktop/BootCamp/My_App/test')
addMACD
?addMACD
?addTA
shiny::runApp('Desktop/BootCamp/My_App/test')
shiny::runApp('Desktop/BootCamp/My_App/test')
shiny::runApp('Desktop/BootCamp/My_App/test')
shiny::runApp('Desktop/BootCamp/My_App/test')
shiny::runApp('Desktop/BootCamp/My_App/test')
shiny::runApp('Desktop/BootCamp/My_App/test')
shiny::runApp('Desktop/BootCamp/My_App/test')
shiny::runApp('Desktop/BootCamp/My_App/test')
shiny::runApp('Desktop/BootCamp/My_App/test')
shiny::runApp('Desktop/BootCamp/My_App/test')
shiny::runApp('Desktop/BootCamp/My_App/proj2')
shiny::runApp('Desktop/BootCamp/My_App/test')
shiny::runApp('Desktop/BootCamp/My_App/test')
shiny::runApp('Desktop/BootCamp/Bootcamp2-Project/Shiny-Project/Luke')
shiny::runApp('Desktop/BootCamp/Bootcamp2-Project/Shiny-Project/Luke')
shiny::runApp('Desktop/BootCamp/Bootcamp2-Project/Shiny-Project/Luke')
shiny::runApp('Desktop/BootCamp/Bootcamp2-Project/Shiny-Project/Luke')
shiny::runApp('Desktop/BootCamp/Bootcamp2-Project/Shiny-Project/Luke')
shiny::runApp('Desktop/BootCamp/Bootcamp2-Project/Shiny-Project/Luke')
shiny::runApp('Desktop/BootCamp/Bootcamp2-Project/Shiny-Project/Luke')
shiny::runApp('Desktop/BootCamp/Bootcamp2-Project/Shiny-Project/Luke')
shiny::runApp('Desktop/BootCamp/My_App/proj2')
library(ISLR)
data(Wage)
head(Wage)
health.table = with(Wage, table(health, health_ins))
health.table
http://216.230.228.88:3838/Bootcamp2-Project/Shiny-Project/Luke/
library(plyr)
?ddply
ddply(Wage, .(maritl), function(x) each(min, max)(x$wage))
library(ISLR)
data(wage)
head(Wage)
x=filter(education=='4. College Grad', data= Wage)
x=filter(education=='4. College Grad')
x=filter(data=Wage, education=='4. College Grad')
?filter
library(dplyr)
?filter
x=filter(education=='4. College Grad', data= Wage)
x=filter(data=Wage, education=='4. College Grad')
x=filter(Wage, education=='4. College Grad')
x
head(x)
select(x, wage)
y= select(x, wage)
head(y)
x = subset(Wage, education=='4. College Grad', select='wage')
head(x)
head(Wage)
z=filter(Wage, education=='4. College Grad')
head(z)
?subset
x = subset(Wage, education=='4. College Grad')
head(x)
?t.test
x=1:10
x
y=c(7:20)
y
z=7:20
z
z==y
all(z==y)
t.test(x,y)
t.test(z,y)
y==z
x= norm(10)
x= rnorm(10)
x
y= rnorm(10)
y
z=rnorm(10,1,1)
z
?rnorm
t.test(x,y)
t.test(x,z)
z=rnorm(10,5,1)
t.test(x,z)
?var.test
var.test(x, y)
z=rnorm(10,5,2)
var.test(x, z)
z=rnorm(10,5,1)
var.test(x, z)
z=rnorm(1000,5,1)
y= rnorm(1000)
x= rnorm(1000)
var.test(x, y)
var.test(x, z)
z=rnorm(1000,4,1)
var.test(x, z)
x= rnorm(100000)
y= rnorm(100000)
z=rnorm(100000,5,1)
var.test(x, z)
var.test(x, y)
head(iris, 4)
levels(iris$Species)
PetalLength_model = lm(Petal.Length ~ Species, data=iris)
PetalLength_aov = aov(PetalLength_model)
?ANOVA
?AOV
?aov
shiny::runApp('Desktop/BootCamp/My_App/project2_backup/Luke')
x=(1:10)
y=c(1:20, sep=2)
y
rm(y)
y= x*2
y
x
m = lm(y~x)
m
m = lm(x~x)
m
m = lm(x~y)
m
aov(m)
library('quantmod')
# setwd('~/Desktop/BootCamp/My_App/proj2')
shiny::runApp('Desktop/BootCamp/My_App/proj2')
shiny::runApp('Desktop/BootCamp/My_App/proj2')
shiny::runApp('Desktop/BootCamp/My_App/proj2')
shiny::runApp('Desktop/BootCamp/My_App/proj2')
shiny::runApp('Desktop/BootCamp/My_App/proj2')
shiny::runApp('Desktop/BootCamp/My_App/proj2')
shiny::runApp('Desktop/BootCamp/My_App/proj2')
shiny::runApp('Desktop/BootCamp/My_App/proj2')
shiny::runApp('Desktop/BootCamp/My_App/proj2')
shiny::runApp('Desktop/BootCamp/My_App/proj2')
shiny::runApp('Desktop/BootCamp/My_App/proj2')
shiny::runApp('Desktop/BootCamp/My_App/proj2')
shiny::runApp('Desktop/BootCamp/My_App/proj2')
shiny::runApp('Desktop/BootCamp/My_App/proj2')
shiny::runApp('Desktop/BootCamp/My_App/proj2')
shiny::runApp('Desktop/BootCamp/My_App/proj2')
shiny::runApp('Desktop/BootCamp/My_App/proj2')
shiny::runApp('Desktop/BootCamp/My_App/proj2')
shiny::runApp('Desktop/BootCamp/My_App/proj2')
shiny::runApp('Desktop/BootCamp/My_App/proj2')
shiny::runApp('Desktop/BootCamp/My_App/proj2')
shiny::runApp('Desktop/BootCamp/My_App/proj2')
shiny::runApp('Desktop/BootCamp/My_App/project2_backup/Luke2')
shiny::runApp('Desktop/BootCamp/My_App/project2_backup/Luke2')
shiny::runApp('Desktop/BootCamp/My_App/project2_backup/Luke')
shiny::runApp('Desktop/BootCamp/My_App/project2_backup/Luke')
shiny::runApp('Desktop/BootCamp/My_App/project2_backup/Luke2')
shiny::runApp('Desktop/BootCamp/My_App/project2_backup/Luke2')
shiny::runApp('Desktop/BootCamp/My_App/proj2')
shiny::runApp('Desktop/BootCamp/My_App/proj2')
shiny::runApp('Desktop/BootCamp/My_App/proj2')
shiny::runApp('Desktop/BootCamp/My_App/proj2')
shiny::runApp('Desktop/BootCamp/My_App/project2_backup/Luke2')
shiny::runApp('Desktop/BootCamp/My_App/proj2')
shiny::runApp('Desktop/BootCamp/My_App/project2_backup/Luke2')
shiny::runApp('Desktop/BootCamp/My_App/proj2')
shiny::runApp('Desktop/BootCamp/My_App/proj2')
shiny::runApp('Desktop/BootCamp/My_App/project2_backup/Luke2')
shiny::runApp('Desktop/BootCamp/My_App/proj2')
x= rnorm(1000)
shapiro.test(X)
shapiro.test(x)
y= x^2
shapiro.test(y)
qqnorm(x)
qqnorm(y)
qqnorm(x)
x= rnorm(100000)
qqnorm(x)
qqnorm(x)
length(x)
x= c(rnorm(100,0,1), rnorm(100,0,80))
head(x)
tail(x)
y= c(rep(A,100), rep(B, 100)
)
y= c(rep('a',100), rep('b', 100))
y
z= cbind(x,y)
z
z
bartlett.test(x)
?bartlett.test
bartlett.test(z)
bartlett.test(x, y)
y='a'
y
y= rep('a', 200)
bartlett.test(x, y)
y=c(rep('a',100), rep('b',100))
bartlett.test(x, y)
x= c(rnorm(100), rnorm(100,1,1))
bartlett.test(x, y)
x= c(rnorm(100), rnorm(100,1,2))
bartlett.test(x, y)
x= c(rnorm(100), rnorm(100,100,1))
bartlett.test(x, y)
library(car)
car::leveneT(x,y)
car::leveneTest(x,y)
?levenTest
?leveneTest
car::leveneTest(x)
y
car::leveneTest(x, group=y)
car::leveneTest(x,factor(y))
x
x= c(rnorm(100), rnorm(100,1,1))
xx
x
car::leveneTest(x,y)
x= c(rnorm(100), rnorm(100,1,90))
car::leveneTest(x,y)
x=c(rep('good',100), rep('bad',100))
x= factor(x)
x
y=c(rep('tall',100), rep('short',100))
y= factor(y)
y
z= cbind(x,y)
chisq.test(x,y)
?sample
u = c('tall', 'short')
u = factor(u)
y= sample(u, size(200))
y= sample(u, size=200)
y= sample(u,replace=TRUE, size=200)
y
chisq.test(x,y)
set.seed(1)
x = seq(1, 5, length.out = 100)
noise = rnorm(n = 100, mean = 0, sd = 1)
beta0 = 1
beta1 = 2
y = beta0 + beta1 * x + noise
model = lm(y ~ x)
model.matrix(model)[1:10, ]
?model.matrix
model.matrix(model)[1:10, ]
model.matrix(model)[1:100, ]
model.matrix(model)[1:1000, ]
set.seed(1)
x = seq(1, 5, length.out = 100)
noise = rnorm(n = 100, mean = 0, sd = 1)
beta0 = 1
beta1 = 2
y = beta0 + beta1 * x^2 + noise
model = lm(y ~ x)
summary(model)
set.seed(1)
x = seq(1, 5, length.out = 100)
noise = rnorm(n = 100, mean = 0, sd = 1)
beta0 = 1
beta1 = 2
y = beta0 + beta1 * x^2 + noise
z = beta0 + beta1 * x   + noise
model1 = lm(y ~ x)
model2 = lm(z ~ x)
summary(model1)
summary(model2)
plot(model1$residuals ~ x)
plot(model2$residuals ~ x)
set.seed(1)
x = seq(1, 5, length.out = 100)
noise = rnorm(n = 100, mean = 0, sd = 1)
beta0 = 1
beta1 = 2
y = beta0 + beat1 * x + beta2 * x^2 + noise
set.seed(1)
x = seq(1, 5, length.out = 100)
noise = rnorm(n = 100, mean = 0, sd = 1)
beta0 = 1
beta1 = 2
beta2 = 3
y = beta0 + beta1 * x + beta2 * x^2 + noise
model1 = lm(y ~ x)
model2 = lm(y ~ x^2)
model3 = lm(y ~ x + x^2)
plot(y ~x)
abline(model1)
plot(y ~x)
abline(model2)
plot(y ~x)
abline(model3)
model2 = lm(y ~ I(x^2))
model3 = lm(y ~ x + I(x^2))
plot(y ~x)
abline(model3)
plot(model2)
abline(model3)
plot(model3)
AIC(model1, model2, model3)
?predict
1+1
source('~/Desktop/BootCamp/Rweek3/HW3/Untitled.R')
source('~/Desktop/BootCamp/Rweek3/HW3/Untitled.R')
source('~/Desktop/BootCamp/Rweek3/HW3/Untitled.R')
Auto
load("~/Documents/Python/LibertyMutual/anotherCombiner/1st_with_cv/bag_with_error/123.RData")
G_lst
max(G_lst)
max(as.vector(G_lst))
as.vector(G_lst)
max(as.vector(G_lst))
max(as.numeric(G_lst))
load("~/Documents/Python/LibertyMutual/anotherCombiner/1st_with_cv/bag_with_error/123.RData")
G_lst
load("~/Documents/Python/LibertyMutual/anotherCombiner/1st_with_cv/bag_with_error/123.RData")
G_lst
load("~/Documents/Python/LibertyMutual/anotherCombiner/1st_with_cv/bag_with_error/123.RData")
G_lst
load("~/Documents/Python/LibertyMutual/anotherCombiner/1st_with_cv/bag_with_error/123.RData")
G_lst
source('~/Desktop/BootCamp/Rweek3/HW3/hw3.R')
nrow(Auto)
round(nrow(Auto)*0.7)
floor(nrow(Auto)*0.7)
source('~/Desktop/BootCamp/Rweek3/HW3/hw3.R')
head(train)
?apply
apply(Auto, 1, class)
apply(Auto, 2, class)
source('~/Desktop/BootCamp/Rweek3/HW3/hw3.R')
train[1:10,]
train
train
source('~/Desktop/BootCamp/Rweek3/HW3/hw3.R')
train
source('~/Desktop/BootCamp/Rweek3/HW3/hw3.R')
knnFit
head(Auto)
source('~/Desktop/BootCamp/Rweek3/HW3/hw3.R')
source('~/Desktop/BootCamp/Rweek3/HW3/hw3.R')
knnFit
class(Auto$mpg01)
source('~/Desktop/BootCamp/Rweek3/HW3/hw3.R')
source('~/Desktop/BootCamp/Rweek3/HW3/hw3.R')
knnFit
source('~/Desktop/BootCamp/Rweek3/HW3/hw3.R')
knnFit
source('~/Desktop/BootCamp/Rweek3/HW3/hw3.R')
knnFit
source('~/Desktop/BootCamp/Rweek3/HW3/hw3.R')
knnFit
plot(knnFit)
source('~/Desktop/BootCamp/Rweek3/HW3/hw3.R')
knnPredict
df=data.frame(lab= test$mpg01, knnPredict)
df
confusionMatrix(knnPredict, test$mpg01 )
source('~/Desktop/BootCamp/Rweek3/HW3/hw3.R')
knnFit
source('~/Desktop/BootCamp/Rweek3/HW3/hw3.R')
knnFit
source('~/Desktop/BootCamp/Rweek3/HW3/hw3.R')
source('~/Desktop/BootCamp/Rweek3/HW3/hw3.R')
knnFit
confusionMatrix(knnPredict, label )
source('~/Desktop/BootCamp/Rweek3/HW3/hw3.R')
source('~/Desktop/BootCamp/Rweek3/HW3/hw3.R')
knnPredict
knnFit
source('~/Desktop/BootCamp/Rweek3/HW3/hw3.R')
knnFit
source('~/Desktop/BootCamp/Rweek3/HW3/hw3.R')
source('~/Desktop/BootCamp/Rweek3/HW3/hw3.R')
data(oil)
head(oil)
oil
fattyAcid
data(oil)
fattyAcids
head(fattyAcids)
nrow(fattyAcids)
length(oiltype)
length(oilYype)
length(oilType)
summarise(fattyAcids)
summary(fattyAcids)
summary(oil)
boxplot(oil[-8])
boxplot(log(oil[-8]))
boxplot(oil$Palmitic ~ oil$type)
oil = fattyAcids
class(oil)
oil$type = oilType
head(oil)
oil
is.na(fattyAcids)
sum(is.na(fattyAcids))
any(is.na(fattyAcids))
barplot(table(oil$type), main = 'Frequencies of Oil Type',
xlab = 'Oil Type', ylab = 'Count')
qplot(oil$type)
any(is.na(fattyAcids))
p1 = ggplot(data=oil, aes(oilType, Palmitic)) + geom_boxplot()
p1 = ggplot(data=oil, aes(type, Palmitic)) + geom_boxplot()
p1
p2 = ggplot(data=oil, aes(type, Stearic)) + geom_boxplot()
p2
summary(oil)
summary(oil)
library(strata)
install.packages('strata')
library(strata)
library(sa,pling)
library(sampling)
install.packages('sampling')
library(sampling)
nrow(oil)
a1 = strata(data=oil, stratanames=type, size=48, method= "srswor",description=FALSE)
oil$type
a1 = strata(data=oil, stratanames="type", size=48, method= "srswor",description=FALSE)
head(oil)
a1 = strata(data=oil, stratanames=oil$type, size=48, method= "srswor",description=FALSE)
a1 = strata(data=oil, stratanames=oil$type, size=48, method= "srswor")
a1 = strata(data=oil, stratanames=oil$type, size=48)
a1 = strata(data=oil, stratanames=oil$type, size=48, method = systematic)
a1 = strata(data=oil, stratanames=oil$type, size=48, method = "systematic")
shiny::runApp('Desktop/BootCamp/My_App/proj2')
1+1
x= 1
library("adabag", lib.loc="~/Library/R/3.1/library")
shiny::runApp('Desktop/BootCamp/My_App/proj2')
shiny::runApp('Desktop/BootCamp/My_App/proj2')
shiny::runApp('Desktop/BootCamp/My_App/proj2')
setwd('~/Desktop/BootCamp/My_App/proj2/')
load('XOM.RData')
head(data)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
